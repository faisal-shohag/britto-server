// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id          Int     @id @default(autoincrement())
  displayName String
  email       String  @unique
  phone       String?
  institute   String?
  photoURL    String?
  thumb       String?
  ID          String?
  group       String?
  district    String?
  father      String?
  mother      String?
  packages    Json?
  uid         String?
  isCompleted Boolean @default(false)
  questions   Question[]
  reports     Report[]
  createdAt   DateTime @default(now())
  posts       Post[]
  comments    Comment[]
  replies     Reply[]
  likes       Like[]
  myCourses   Course[]
  enrolledCourses EnrolledCourse[] // Join table for many-to-many relationship with Course
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  subtitle    String?
  user        Users?   @relation(fields: [userId], references: [id])
  userId      Int?
  description String
  type        String?
  photoURL    String?
  routine     String?
  resources   CourseResources[]
  exams       Exam[]
  createdAt   DateTime @default(now())
  isPublished Boolean  @default(false)
  isPaid      Boolean  @default(true)
  fee         Float    @default(0)
  start       DateTime
  end         DateTime
  enrolledUsers EnrolledCourse[] // Join table for many-to-many relationship with Users
}

model EnrolledCourse {
  user   Users  @relation(fields: [userId], references: [id])
  userId Int
  course Course @relation(fields: [courseId], references: [id])
  courseId Int

  @@id([userId, courseId]) // Composite primary key
}


model CourseResources {
  id        Int      @id @default(autoincrement())
  title String
  course Course @relation(fields: [courseId], references: [id])
  courseId Int
  type  String?
  url   String?
}

model Exam {
  id        Int      @id @default(autoincrement())
  title String
  description String 
  type Json[]
  duration Int
  questions Question[]
  createdAt DateTime @default(now())
  course Course @relation(fields: [courseId], references: [id])
  courseId Int
  isPublished Boolean @default(false)
}

model Question {
  id          Int      @id @default(autoincrement())
  title       String
  options Option[]
  explanation String?
  correctAnswer Int
  exam  Exam @relation(fields: [examId], references: [id])
  examId Int
  user Users @relation(fields: [userId], references: [id])
  userId Int
  tags    TagsOnQuestions[]
  reports Report[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}



model Option {
  id         Int      @id @default(autoincrement())
  text       String
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  @@index([questionId])
}

model Tag {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  questions TagsOnQuestions[]
}

model TagsOnQuestions {
  questionId Int
  tagId      Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([questionId, tagId])
  @@index([questionId])
  @@index([tagId])
}

model Report {
  id        Int      @id @default(autoincrement())
  comment   String
  createdAt DateTime @default(now())
  questionId Int
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  @@index([questionId])
}




model Practices {
  id       Int    @id @default(autoincrement())
  subject  String
  chapter  String
  examName String
  exam     Json
}

model Notices {
  id     Int      @id @default(autoincrement())
  icon   String?
  notice String
  date   DateTime @default(now())
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    Users     @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  likes     Like[]
  images    Image[]   @relation("PostImages")
  type String?

  @@index([authorId])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  fileId    String?
  post      Post?    @relation("PostImages", fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  comment   Comment? @relation("CommentImages", fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?

  @@index([postId])
  @@index([commentId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    Users     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  replies   Reply[]
  likes     Like[]
  images    Image[]   @relation("CommentImages")

  @@index([authorId])
  @@index([postId])
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    Users    @relation(fields: [authorId], references: [id])
  authorId  Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  likes     Like[]

  @@index([authorId])
  @@index([commentId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
  reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId   Int?

  @@unique([userId, postId, commentId, replyId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
  @@index([replyId])
}